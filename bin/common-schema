#!/usr/bin/env php
<?php

/*
 * This file is part of gpupo/common-schema
 * Created by Gilmar Pupo <contact@gpupo.com>
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 * For more information, see <https://opensource.gpupo.com/>.
 */

namespace Gpupo\CommonSchema\Console\Command;

require 'vendor/autoload.php';

use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;
use Gpupo\Common\Entity\CollectionInterface;
use Gpupo\CommonSdk\Entity\CollectionContainerInterface;
use Gpupo\CommonSchema\Trading\Trading;
use Gpupo\CommonSchema\Trading\Order\Order;
use Gpupo\CommonSchema\Trading\Order\Customer\Customer;
use Gpupo\CommonSchema\Trading\Order\OrderSchema;
use Gpupo\CommonSchema\Trading\Payment\Transaction;
use Gpupo\CommonSchema\Trading\Product\ProductSchema;
use Symfony\Component\Yaml\Yaml;
use Gpupo\CommonSdk\Entity\Schema\Tools;

class CommonSchema
{
    protected $input;
    protected $output;

    public function __construct($input, $output)
    {
        $this->input = $input;
        $this->output = $output;
    }

    protected function save($file, $content)
    {
        file_put_contents($file, $content);
        $this->output->writeln(sprintf('Generated <fg=green> %s </> file', $file));
    }

    public function saveDataToSchema($key, $value, array $data)
    {
        $file = sprintf('Resources/schema/v2/%s.yaml', $key);
        $content = sprintf("# %s gpupo/common-schema\n# version: 2.0\n# generated at %s\n", $key, date('r')).Yaml::dump($data, 8);

        return $this->save($file, $content);
    }

    public function saveDataToYamlEntity($object)
    {
        $class = get_class($object);
        $toClass = str_replace('CommonSchema', 'CommonSchema\ORM\Entity', $class);
        $repositoryClass = str_replace('CommonSchema', 'CommonSchema\ORM\Repository', $class) . 'Repository';
        $table = $object->getTableName();
        $doctrine = [
            'type' =>  'entity',
            'table' => $table,
            'repositoryClass' => $repositoryClass,
            'id'    => [
                'id' => ['type' => 'integer', 'generator' => ['strategy' => 'AUTO']],
            ]
        ];

        foreach($object->getSchema() as $key => $value) {
            $doctrine['fields'][$key] = [
                'type' =>  $value,
                'lenght' =>  50,
                'unique' => false,
                'options'=> [
                    'comment' => '',
                ],
            ];
        }

        $doctrine['lifecycleCallbacks'] = [
            'prePersist' => [],
            'postPersist' => [],
        ];

        $entity = [$toClass => $doctrine];
        $file = sprintf('config/yaml/%s.dcm.yml', str_replace('\\', '.', $toClass));
        $content = sprintf("# %s gpupo/common-schema metadata\n# version: 2.0\n# generated at %s\n", $key, date('r')).Yaml::dump($entity, 8, 2);

        return $this->save($file, $content);
    }

    public function saveDataToDoctrineSchema($key, $value, array $data)
    {
        $doctrine = [
            'type' =>  'entity',
            'table' => 'trading_'.$key,
            'repositoryClass' => 'BugRepository',
            'id'    => [
                'id' => ['type' => 'integer', 'generator' => ['strategy' => 'AUTO']],
            ]
        ];

        foreach($data as $vkey => $vvalue) {
            if (is_array($vvalue) && 1 === count($vvalue) && is_array(current($vvalue))) {

                $this->saveDataToDoctrineSchema($key.'_'.$vkey, null, current($vvalue));
                continue;
            } elseif (is_array($vvalue)) {
                $this->saveDataToDoctrineSchema($key.'_'.$vkey, null, $vvalue);
                $vvalue = 'object';
            }

            $doctrine['fields'][$vkey] = ['type' =>  $vvalue];
        }

        $file = sprintf('config/yaml/%s.orm.yaml', $key);
        $content = sprintf("# %s gpupo/common-schema\n# version: 2.0\n# generated at %s\n", $key, date('r')).Yaml::dump($doctrine, 8);
        return $this->save($file, $content);
    }
}

$commonSchema = new CommonSchema(new ArgvInput(), new ConsoleOutput());

$order = new Order();
$transaction = new Transaction();
foreach ([
    'order' => $order,
    'order-customer' => $order->getCustomer(),
    'transaction' => $transaction,
] as $key => $value) {
    $data = Tools::getRecursiveSchema($value);
    $commonSchema->saveDataToSchema($key, $value, $data);
}


$trading = new Trading();
foreach($trading as $prop) {
    if ($prop instanceof CollectionInterface) {
        $commonSchema->saveDataToYamlEntity($prop);
    }
}
//
// foreach ([
//     'order' => $order,
// ] as $key => $value) {
//     $commonSchema->saveDataToDoctrineSchema($key, $value, $data);
// }
